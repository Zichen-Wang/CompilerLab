//
// Generated by JTB 1.3.2
//

package kanga.visitor;
import kanga.kanga2mips.PrintMIPS;
import kanga.syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Kanga2MIPS extends GJDepthFirst<String,String> {

    private int realArgNum, stackUse, maxCallArgNum;

    public boolean isNumeric(String str){
        for (int i = 0; i < str.length(); i++) {
            if(!Character.isDigit(str.charAt(i)))
                return false;
        }
        return true;
    }


    //f0 -> ( ( Label() )? Stmt() )*的时候用，打印label
    public String visit(NodeOptional n, String argu) {
        if ( n.present() )
            PrintMIPS.print(n.node.accept(this,argu) + ":");
        return null;
    }

    //
    // User-generated visitor methods below
    //
    /**
     * f0 -> "MAIN"
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( Procedure() )*
     * f13 -> <EOF>
     */
    public String visit(Goal n, String argu) {
        PrintMIPS.pBegin("main");
        realArgNum = Integer.parseInt(n.f2.accept(this,argu));
        stackUse = Integer.parseInt(n.f5.accept(this,argu));
        maxCallArgNum = Integer.parseInt(n.f8.accept(this,argu));

        realArgNum = Integer.max(0, realArgNum - 4);
        maxCallArgNum = Integer.max(0, maxCallArgNum - 4);
        stackUse = stackUse - realArgNum + maxCallArgNum + 2;
        stackUse <<= 2;
        PrintMIPS.println("sw $fp, -8($sp)");
        PrintMIPS.println("sw $ra, -4($sp)");
        PrintMIPS.println("move $fp, $sp");
        PrintMIPS.println("subu $sp, $sp, " + stackUse);
        n.f10.accept(this, argu);
        PrintMIPS.println("lw $ra, -4($fp)");
        PrintMIPS.println("lw $fp, -8($fp)");
        PrintMIPS.println("addu $sp, $sp, " + stackUse);
        PrintMIPS.println("j $ra");
        PrintMIPS.pEnd();

        n.f12.accept(this, argu);


        PrintMIPS.pBegin("_halloc");
        PrintMIPS.println("li $v0, 9");
        PrintMIPS.println("syscall");
        PrintMIPS.println("j $ra");
        PrintMIPS.pEnd();


        PrintMIPS.pBegin("_print");
        PrintMIPS.println("li $v0, 1");
        PrintMIPS.println("syscall");
        PrintMIPS.println("la $a0, newl");
        PrintMIPS.println("li $v0, 4");
        PrintMIPS.println("syscall");
        PrintMIPS.println("j $ra");
        PrintMIPS.pEnd();

        PrintMIPS.println("\t\t\t.data");
        PrintMIPS.println("\t\t\t.align\t0");
        PrintMIPS.println("newl:\t\t.asciiz\t\"\\n\"");
        PrintMIPS.println("\t\t\t.data");
        PrintMIPS.println("\t\t\t.align\t0");
        return null;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public String visit(StmtList n, String argu) {
        n.f0.accept(this, argu);
        return null;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     */
    public String visit(Procedure n, String argu) {
        PrintMIPS.pBegin(n.f0.accept(this, argu));
        realArgNum = Integer.parseInt(n.f2.accept(this,argu));
        stackUse = Integer.parseInt(n.f5.accept(this,argu));
        maxCallArgNum = Integer.parseInt(n.f8.accept(this,argu));

        realArgNum = Integer.max(0, realArgNum - 4);
        maxCallArgNum = Integer.max(0, maxCallArgNum - 4);
        stackUse = stackUse - realArgNum + maxCallArgNum + 2;
        stackUse <<= 2;
        PrintMIPS.println("sw $fp, -8($sp)");
        PrintMIPS.println("move $fp, $sp");
        PrintMIPS.println("subu $sp, $sp, " + stackUse);
        PrintMIPS.println("sw $ra, -4($fp)");
        n.f10.accept(this, argu);
        PrintMIPS.println("lw $ra, -4($fp)");
        PrintMIPS.println("lw $fp, " + (stackUse - 8) + "($sp)");
        PrintMIPS.println("addu $sp, $sp, " + stackUse);
        PrintMIPS.println("j $ra");
        PrintMIPS.pEnd();

        return null;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     *       | ALoadStmt()
     *       | AStoreStmt()
     *       | PassArgStmt()
     *       | CallStmt()
     */
    public String visit(Stmt n, String argu) {
        n.f0.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "NOOP"
     */
    public String visit(NoOpStmt n, String argu) {
        PrintMIPS.println("nop");
        return null;
    }

    /**
     * f0 -> "ERROR"
     */
    public String visit(ErrorStmt n, String argu) {
        return null;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Reg()
     * f2 -> Label()
     */
    public String visit(CJumpStmt n, String argu) {
        PrintMIPS.println("beqz $" + n.f1.accept(this, argu) + ", " + n.f2.accept(this, argu));
        return null;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public String visit(JumpStmt n, String argu) {
        PrintMIPS.println("b " + n.f1.accept(this, argu));
        return null;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Reg()
     * f2 -> IntegerLiteral()
     * f3 -> Reg()
     */
    public String visit(HStoreStmt n, String argu) {
        PrintMIPS.println("sw $" + n.f3.accept(this, argu) + ", "
                + n.f2.accept(this, argu) + "($" + n.f1.accept(this, argu) + ")");
        return null;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Reg()
     * f2 -> Reg()
     * f3 -> IntegerLiteral()
     */
    public String visit(HLoadStmt n, String argu) {
        PrintMIPS.println("lw $" + n.f1.accept(this, argu) + ", "
                + n.f3.accept(this, argu) + "($" + n.f2.accept(this, argu) + ")");
        return null;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Reg()
     * f2 -> Exp()
     */
    public String visit(MoveStmt n, String argu) {
        n.f2.accept(this, n.f1.accept(this, argu));
        return null;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public String visit(PrintStmt n, String argu) {
        String curExp = n.f1.accept(this, argu);
        if(isNumeric(curExp)) PrintMIPS.println("li $a0, " + curExp);
        else PrintMIPS.println("move $a0, $" + curExp);
        PrintMIPS.println("jal _print");
        return null;
    }

    /**
     * f0 -> "ALOAD"
     * f1 -> Reg()
     * f2 -> SpilledArg()
     */
    public String visit(ALoadStmt n, String argu) {
        PrintMIPS.println("lw $" + n.f1.accept(this, argu) + ", " + n.f2.accept(this, argu));
        return null;
    }

    /**
     * f0 -> "ASTORE"
     * f1 -> SpilledArg()
     * f2 -> Reg()
     */
    public String visit(AStoreStmt n, String argu) {
        PrintMIPS.println("sw $" + n.f2.accept(this, argu) + ", " + n.f1.accept(this, argu));
        return null;
    }

    /**
     * f0 -> "PASSARG"
     * f1 -> IntegerLiteral()
     * f2 -> Reg()
     */
    public String visit(PassArgStmt n, String argu) {
        PrintMIPS.println("sw $" + n.f2.accept(this, argu) + ", "
                + ((Integer.parseInt(n.f1.accept(this, argu)) - 1) << 2) + "($sp)");
        return null;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     */
    public String visit(CallStmt n, String argu) {
        PrintMIPS.println("jalr $" + n.f1.accept(this, argu));
        return null;
    }

    /**
     * f0 -> HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public String visit(Exp n, String argu) {
        n.f0.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public String visit(HAllocate n, String argu) {
        String curExp = n.f1.accept(this, null);
        if(isNumeric(curExp)) PrintMIPS.println("li $a0, " + curExp);
        else PrintMIPS.println("move $a0, $" + curExp);
        PrintMIPS.println("jal _halloc");
        PrintMIPS.println("move $" + argu + ", $v0");
        return null;
    }

    /**
     * f0 -> Operator()
     * f1 -> Reg()
     * f2 -> SimpleExp()
     */
    public String visit(BinOp n, String argu) {
        String curExp = n.f2.accept(this, null);
        String op = n.f0.accept(this, null);
        //只有slt和add会带立即数运算
        if(isNumeric(curExp)) PrintMIPS.println(op + "i $" + argu + ", $" + n.f1.accept(this, argu) + ", " + curExp);
        else PrintMIPS.println(op + " $" + argu + ", $" + n.f1.accept(this, argu) + ", $" + curExp);

        return null;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public String visit(Operator n, String argu) {
        String[] _ret = { "slt", "add", "sub", "mul" };
        return _ret[n.f0.which];
    }

    /**
     * f0 -> "SPILLEDARG"
     * f1 -> IntegerLiteral()
     */
    public String visit(SpilledArg n, String argu) {
        int curPos = Integer.parseInt(n.f1.accept(this, argu));

        if(curPos < realArgNum) {  //说明是参数，在fp上方
            return (curPos << 2) + "($fp)";
        }
        else {  //否则就是被保存的s或者需要溢出的变量
            return (-((curPos - realArgNum + 3) << 2)) + "($fp)";
        }
    }

    /**
     * f0 -> Reg()
     *       | IntegerLiteral()
     *       | Label()
     */
    public String visit(SimpleExp n, String argu) {
        if(argu != null) {  //说明是MOVE语句下来的
            if(n.f0.which == 0) {
                PrintMIPS.println("move $" + argu + ", $" + n.f0.accept(this, argu));
            }
            else if(n.f0.which == 1) {
                PrintMIPS.println("li $" + argu + ", " + n.f0.accept(this, argu));
            }
            else {
                PrintMIPS.println("la $" + argu + ", " + n.f0.accept(this, argu));
            }
        }
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "a0"
     *       | "a1"
     *       | "a2"
     *       | "a3"
     *       | "t0"
     *       | "t1"
     *       | "t2"
     *       | "t3"
     *       | "t4"
     *       | "t5"
     *       | "t6"
     *       | "t7"
     *       | "s0"
     *       | "s1"
     *       | "s2"
     *       | "s3"
     *       | "s4"
     *       | "s5"
     *       | "s6"
     *       | "s7"
     *       | "t8"
     *       | "t9"
     *       | "v0"
     *       | "v1"
     */
    public String visit(Reg n, String argu) {
        String[] _ret = { "a0"
                ,"a1"
                ,"a2"
                ,"a3"
                ,"t0"
                ,"t1"
                ,"t2"
                ,"t3"
                ,"t4"
                ,"t5"
                ,"t6"
                ,"t7"
                ,"s0"
                ,"s1"
                ,"s2"
                ,"s3"
                ,"s4"
                ,"s5"
                ,"s6"
                ,"s7"
                ,"t8"
                ,"t9"
                ,"v0"
                ,"v1" };
        return _ret[n.f0.which];
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, String argu) {
        return n.f0.toString();
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Label n, String argu) {
        return n.f0.toString();
    }

}
