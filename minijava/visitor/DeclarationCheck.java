//
// Generated by JTB 1.3.2
//

package minijava.visitor;
import minijava.syntaxtree.*;

import minijava.typecheck.AllClasses;
import minijava.typecheck.AllType;
import minijava.typecheck.PrintErrorMsg;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
/*
 * 本次pass做变量声明类型的检查
 */
public class DeclarationCheck extends GJDepthFirst<AllType,AllType> {
   

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public AllType visit(Goal n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public AllType visit(MainClass n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public AllType visit(TypeDeclaration n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public AllType visit(ClassDeclaration n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public AllType visit(ClassExtendsDeclaration n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String fatherClassName = n.f3.f0.toString();
      if(((AllClasses)argu).getMyClass(fatherClassName) == null) {
    	  errorMsg = "cannot find father class: " + fatherClassName;
    	  PrintErrorMsg.addError(errorMsg, n.f3.f0.beginLine, n.f3.f0.beginColumn);
      }
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public AllType visit(VarDeclaration n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public AllType visit(MethodDeclaration n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public AllType visit(FormalParameterList n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public AllType visit(FormalParameter n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public AllType visit(FormalParameterRest n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public AllType visit(Type n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      AllType curType = n.f0.accept(this, argu);
      if(curType.getName().equals("int") || curType.getName().equals("boolean") || curType.getName().equals("int[]"))
    	  return _ret;
      if(((AllClasses)argu).getMyClass(curType.getName()) == null) {
    	  errorMsg = "cannot find type: " + curType.getName();
    	  PrintErrorMsg.addError(errorMsg, curType.getRow(), curType.getCol());
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public AllType visit(ArrayType n, AllType argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      AllType _ret=new AllType("int[]", n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public AllType visit(BooleanType n, AllType argu) {
      n.f0.accept(this, argu);
      AllType _ret=new AllType("boolean", n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public AllType visit(IntegerType n, AllType argu) {
      n.f0.accept(this, argu);
      AllType _ret=new AllType("int", n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public AllType visit(Identifier n, AllType argu) {
      AllType _ret=new AllType(n.f0.toString(), n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }


   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public AllType visit(AllocationExpression n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      n.f0.accept(this, argu);
      String curClassName = n.f1.f0.toString();
      if(((AllClasses)argu).getMyClass(curClassName) == null) {
    	  errorMsg = "cannot find class: " + curClassName;
    	  PrintErrorMsg.addError(errorMsg, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }
}
