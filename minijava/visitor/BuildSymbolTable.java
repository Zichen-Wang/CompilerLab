//
// Generated by JTB 1.3.2
//

package minijava.visitor;
import minijava.syntaxtree.*;

import minijava.typecheck.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */


/**
 * 第一次遍历语法树，建立符号表
 * 检查类、方法、变量重复定义
 */
public class BuildSymbolTable extends GJDepthFirst<AllType, AllType> {

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public AllType visit(Goal n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   /*
    * 主类
    * 构造主类及其方法
    */
   public AllType visit(MainClass n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      /*
       * 定义主类
       */
      MyClass curClass;
      String className;
      /*
       * 获取主类名
       */
      className = n.f1.accept(this, argu).getName();
      /*
       * 构造主类
       */
      curClass = new MyClass(className, (AllClasses)argu, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      /*
       * 设置默认继承Object类
       */
      curClass.setParentName("Object");
      /*
       * 插入到类集合中
       */
      ((AllClasses)argu).insertClass(className, curClass);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      /*
       * 定义main方法
       */
      MyMethod curMethod = new MyMethod("void", "main", curClass, n.f6.beginLine, n.f6.beginColumn);
      curClass.insertMethod("main", curMethod);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      
      /*
       * 定义参数列表
       */
      BasicType curPara;
      String curParaName;
      /*
       * 加入 String[] 到参数列表
       */
      curParaName = n.f11.accept(this, argu).getName();
      curPara = new BasicType("String[]", curMethod, n.f8.beginLine, n.f8.beginColumn);
      curMethod.insertPara(curPara);
      curMethod.insertParaName(curParaName);
      /*
       * 参数也要加入局部变量表进行重复定义检测
       */
      curMethod.insertLocalVar(curParaName, curPara);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, curMethod);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public AllType visit(TypeDeclaration n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public AllType visit(ClassDeclaration n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      n.f0.accept(this, argu);
      /*
       * 定义无继承的新类
       */
      MyClass curClass;
      String curClassName;
      
      curClassName = n.f1.accept(this, argu).getName();
      curClass = new MyClass(curClassName, (AllClasses)argu, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      curClass.setParentName("Object");  //默认继承Object类
      errorMsg = ((AllClasses)argu).insertClass(curClassName, curClass);
      if(errorMsg != null) {
    	  PrintErrorMsg.addError(errorMsg, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      }
      
      n.f2.accept(this, argu);
      
      n.f3.accept(this, curClass);  //去定义类的成员变量
      n.f4.accept(this, curClass);  //去定义类的成员方法
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public AllType visit(ClassExtendsDeclaration n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      n.f0.accept(this, argu);
      /*
       * 定义带继承的新类
       */
      MyClass curClass;
      String curClassName;
      
      curClassName = n.f1.accept(this, argu).getName();
      curClass = new MyClass(curClassName, (AllClasses)argu, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      
      n.f2.accept(this, argu);
      /*
       * 继承
       */
      String fatherClassName;
      fatherClassName = n.f3.accept(this, argu).getName();
      errorMsg = curClass.setParentName(fatherClassName);

      if(errorMsg != null) {
    	  PrintErrorMsg.addError(errorMsg, n.f3.f0.beginLine, n.f3.f0.beginColumn);
      }
      
      errorMsg = ((AllClasses)argu).insertClass(curClassName, curClass);
      
      if(errorMsg != null) {
    	  PrintErrorMsg.addError(errorMsg, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      }
      n.f4.accept(this, argu);
      n.f5.accept(this, curClass);
      n.f6.accept(this, curClass);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public AllType visit(VarDeclaration n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      /*
       * 定义变量表
       */
      BasicType curVar;
      String varType, varName;
      varType = n.f0.accept(this, argu).getName();
      varName = n.f1.accept(this, argu).getName();
      if(argu instanceof MyClass) {
    	  curVar = new BasicType(varType, (MyClass)argu, n.f1.f0.beginLine, n.f1.f0.beginColumn);
    	  errorMsg = ((MyClass)argu).insertMemberVar(varName, curVar);
    	  if(errorMsg != null) {
    		  PrintErrorMsg.addError(errorMsg, n.f1.f0.beginLine, n.f1.f0.beginColumn);
    	  }
      }
      else if(argu instanceof MyMethod) {
    	  curVar = new BasicType(varType, (MyMethod)argu, n.f1.f0.beginLine, n.f1.f0.beginColumn);
    	  errorMsg = ((MyMethod)argu).insertLocalVar(varName, curVar);
    	  if(errorMsg != null) {
    		  PrintErrorMsg.addError(errorMsg, n.f1.f0.beginLine, n.f1.f0.beginColumn);
    	  }
      }
      else { // Error Occur
    	  curVar = null;
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public AllType visit(MethodDeclaration n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      n.f0.accept(this, argu);
      
      /*
       * 定义新方法
       */
      MyMethod curMethod;
      String methodName, methodType;
      
      methodType = n.f1.accept(this, argu).getName();
      
      methodName = n.f2.accept(this, argu).getName();
      
      curMethod = new MyMethod(methodType, methodName, (MyClass)argu, n.f2.f0.beginLine, n.f2.f0.beginColumn);
      
      errorMsg = ((MyClass)argu).insertMethod(methodName, curMethod);
      if(errorMsg != null) {
    	  PrintErrorMsg.addError(errorMsg, n.f2.f0.beginLine, n.f2.f0.beginColumn);
      }
      
      n.f3.accept(this, argu);
      n.f4.accept(this, curMethod);
      n.f5.accept(this, argu);
      
      n.f6.accept(this, argu);
      n.f7.accept(this, curMethod);
      n.f8.accept(this, curMethod);
      n.f9.accept(this, argu);
      n.f10.accept(this, curMethod);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public AllType visit(FormalParameterList n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public AllType visit(FormalParameter n, AllType argu) {
	  String errorMsg = null;
      AllType _ret=null;
      /*
       * 定义形参列表
       */
      BasicType curPara;
      String paraType, paraName;
      MyMethod curMethod = (MyMethod)argu;
      paraType = n.f0.accept(this, argu).getName();
      paraName = n.f1.accept(this, argu).getName();
      curMethod.insertParaName(paraName);
      curPara = new BasicType(paraType, curMethod, n.f1.f0.beginLine, n.f1.f0.beginColumn);
      curMethod.insertPara(curPara);
	  errorMsg = curMethod.insertLocalVar(paraName, curPara);
	  if(errorMsg != null) {
		  PrintErrorMsg.addError(errorMsg, n.f1.f0.beginLine, n.f1.f0.beginColumn);
	  }
	  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public AllType visit(FormalParameterRest n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public AllType visit(Type n, AllType argu) {
      AllType _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public AllType visit(ArrayType n, AllType argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      AllType _ret = new AllType("int[]", n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public AllType visit(BooleanType n, AllType argu) {
      n.f0.accept(this, argu);
      AllType _ret = new AllType("boolean", n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public AllType visit(IntegerType n, AllType argu) {
	  n.f0.accept(this, argu);
      AllType _ret = new AllType("int", n.f0.beginLine, n.f0.beginColumn);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public AllType visit(Statement n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public AllType visit(Block n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public AllType visit(AssignmentStatement n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public AllType visit(ArrayAssignmentStatement n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public AllType visit(IfStatement n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public AllType visit(WhileStatement n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public AllType visit(PrintStatement n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public AllType visit(Expression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public AllType visit(AndExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public AllType visit(CompareExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public AllType visit(PlusExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public AllType visit(MinusExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public AllType visit(TimesExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public AllType visit(ArrayLookup n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public AllType visit(ArrayLength n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public AllType visit(MessageSend n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public AllType visit(ExpressionList n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public AllType visit(ExpressionRest n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public AllType visit(PrimaryExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public AllType visit(IntegerLiteral n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public AllType visit(TrueLiteral n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public AllType visit(FalseLiteral n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public AllType visit(Identifier n, AllType argu) {
	  /*
	   * 返回IDentifier的名字
	   */
	  String idName = n.f0.toString();
      AllType _ret = new AllType(idName, n.f0.beginLine, n.f0.beginColumn);
      
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public AllType visit(ThisExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public AllType visit(ArrayAllocationExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public AllType visit(AllocationExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public AllType visit(NotExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public AllType visit(BracketExpression n, AllType argu) {
      AllType _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
